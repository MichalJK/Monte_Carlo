{
  "hash": "6d80d0c1858aab8d821a14bf2780eef0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle-block-banner: '#54698a'\ntitle-block-banner-color: '#dee1e3'\ntitle: Symulacja Monte Carlo\nsubtitle: przykład\nauthor: Michał Kołodziejczyk\ndate: now\nformat:\n  html:\n    toc: true\n    toc-location: left\n    tbl-pos: H\n    code-fold: true\n    code-summary: 'Skrypt:'\neditor: visual\ncss: styles.css\ncap-location: margin\n---\n\nSymulacja Monte Carlo to metoda używana do przewidywania prawdopodobieństwa wyniku, gdy występuje zmienność danych. Zmienność danych może być opisana w różny sposób. Najczęściej wykorzystuje się metody statystyczne i w przypadku, gdy dana wielkość posiada rozkład normalny, jego zmienność opisuje wartość średnia i odchylenie standardowe.\n\nEksperyment Monte Carlo polega na losowaniu dużej liczby danych z założonego zakresu zmienności poszczególnej wielkości modelowej. Następnie wykorzystuje się je do wygenerowania dużej liczby odpowiedzi modelu i w rezultacie, do oceny uzyskanego rozkładu wyników metodami statystycznymi.\n\nIdea metody Monte Carlo została naszkicowana na poniższym rysunku dla bardzo prostego modelu opisanego zwykłą funkcją kilku zmiennych niezależnych $x_i$. W przedstawionym przykładzie założono dla uproszczenia, że rozkład każdej z nich jest zgodny z rozkładem Gaussa.\n\n![Szkic metody Monte Carlo](szkic.png){#fig-11 fig-align=\"center\" width=\"439\"}\n\nSchemat losowania danych jest następujący:\n\n-   z pomocą generatora liczb losowych losuje się prawdopodobieństwo $p$ dla każdej danej wejściowej $x_i$,\n\n-   następnie z pomocą funkcji odwrotnej skumulowanego rozkładu Gaussa wyznacza się bieżącą wartość danej $x_i$. Poniższy rysunek ilustruje ten proces.\n\n![Schemat losowania wartości $x_i$](losowanie.png){#fig-22 fig-align=\"center\" width=\"373\"}\n\n# Funkcje\n\n## Model\n\nModel opisany jest funkcją trzech zmiennych niezależnych $x_1, x_2, x_3$:\n\n$y = a + b \\: sin(x_1) + c\\: x_2^2 + d \\: ln(x_3)$,\n\ngdzie $a,\\: b,\\: c$ i $d$ są stałymi parametrami.\n\n::: {#1bb10734 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, ks_2samp, shapiro\nimport math\n\n# model\ndef funkcja_model(param, x):\n    a = param[0]\n    b = param[1]\n    c = param[2]\n    d = param[3]\n    # model\n    y = a + b*math.sin(x[0]) + c * (x[1] ** 2) +d * math.log(x[2])\n    return y\n```\n:::\n\n\n## Wykresy\n\nFunkcja 'wykresy' kreśli histogram, rozkład gęstości prawdopodobieństwa i dystrybuantę każdej danej. Dla uproszczenia założono rozkłady normalne.\n\n::: {#a66cee77 .cell execution_count=2}\n``` {.python .cell-code}\ndef wykresy(i, x, sd):\n        plt.subplot(1, 3, 1)\n        plt.hist(np.random.normal(x[i], sd[i], 10000), bins=30, alpha=0.7, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"częstość\")\n        plt.title(\"Histogram\")\n\n        xx = np.linspace(x[i] - 4 * sd[i], x[i] + 4 * sd[i], 100)\n        yy = norm.pdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 2)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"gęstość prawdopodobieństwa\")\n        plt.title(f\"Rozkład x{i+1}\")\n\n        yy = norm.cdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 3)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"prawdopodobieństwo skumulowane\")\n        plt.title(\"Dystrybuanta\")\n        plt.show()\n```\n:::\n\n\n## Monte Carlo\n\nFunkcja realizująca eksperyment Monte Carlo. Parametry formalne: n - liczba zmiennych $x_i$, nn - liczba losowań, x - wartości średnie danych, sd - ich odchylenia standardowe, parametry - parametry funkcji opisującej model. Funkcja wykorzystuje generator liczb losowych i funkcję odwrotną dystrybuanty.\n\n::: {#b753f250 .cell execution_count=3}\n``` {.python .cell-code}\ndef monte_carlo(n, nn, x, sd, parametry):\n    np.random.seed(7)\n    y = np.zeros(nn)\n    for i in range(nn):\n        los_x = np.zeros(n)\n        for j in range(n):\n            los_x[j] = norm.ppf(np.random.rand(), x[j], sd[j])\n        y[i] = funkcja_model(parametry, los_x)\n    return y\n```\n:::\n\n\n# Dane\n\nPrzykładowe dane.\n\n::: {#7870a92a .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nfrom itables import show    \n\nn = 3  # liczba zmiennych niezależnych\nparametry = [1, 2, 3, 4]\n\nx1 = 10\nsd1 = 0.51\n\nx2 = 15\nsd2 = 0.5\n\nx3 = 5\nsd3 = 0.1\n\nx = [x1, x2, x3]\nsd = [sd1, sd2, sd3]\n\ndane_x = pd.DataFrame(x)\ndane_sd = pd.DataFrame(sd)\n\ndane = pd.concat([dane_x, dane_sd], axis=1)\ndane.columns = ['x','std']\ndane.index = ['x1','x2','x3']\n\nshow(np.transpose(dane))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table id=\"itables_dbcb2604_659a_467a_867d_59610c0c2a44\" class=\"display nowrap\" data-quarto-disable-processing=\"true\" style=\"table-layout:auto;width:auto;margin:auto;caption-side:bottom\">\n<thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x1</th>\n      <th>x2</th>\n      <th>x3</th>\n    </tr>\n  </thead><tbody><tr>\n<td style=\"vertical-align:middle; text-align:left\">\n<div style=\"float:left; margin-right: 10px;\">\n<a href=https://mwouts.github.io/itables/><svg class=\"main-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\nwidth=\"64\" viewBox=\"0 0 500 400\" style=\"font-family: 'Droid Sans', sans-serif;\">\n    <g style=\"fill:#d9d7fc\">\n        <path d=\"M100,400H500V357H100Z\" />\n        <path d=\"M100,300H400V257H100Z\" />\n        <path d=\"M0,200H400V157H0Z\" />\n        <path d=\"M100,100H500V57H100Z\" />\n        <path d=\"M100,350H500V307H100Z\" />\n        <path d=\"M100,250H400V207H100Z\" />\n        <path d=\"M0,150H400V107H0Z\" />\n        <path d=\"M100,50H500V7H100Z\" />\n    </g>\n    <g style=\"fill:#1a1366;stroke:#1a1366;\">\n   <rect x=\"100\" y=\"7\" width=\"400\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;400;0\"\n      dur=\"5s\"\n      repeatCount=\"indefinite\" />\n      <animate\n      attributeName=\"x\"\n      values=\"100;100;500\"\n      dur=\"5s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <rect x=\"0\" y=\"107\" width=\"400\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;400;0\"\n      dur=\"3.5s\"\n      repeatCount=\"indefinite\" />\n    <animate\n      attributeName=\"x\"\n      values=\"0;0;400\"\n      dur=\"3.5s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <rect x=\"100\" y=\"207\" width=\"300\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;300;0\"\n      dur=\"3s\"\n      repeatCount=\"indefinite\" />\n    <animate\n      attributeName=\"x\"\n      values=\"100;100;400\"\n      dur=\"3s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <rect x=\"100\" y=\"307\" width=\"400\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;400;0\"\n      dur=\"4s\"\n      repeatCount=\"indefinite\" />\n      <animate\n      attributeName=\"x\"\n      values=\"100;100;500\"\n      dur=\"4s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <g style=\"fill:transparent;stroke-width:8; stroke-linejoin:round\" rx=\"5\">\n            <g transform=\"translate(45 50) rotate(-45)\">\n                <circle r=\"33\" cx=\"0\" cy=\"0\" />\n                <rect x=\"-8\" y=\"32\" width=\"16\" height=\"30\" />\n            </g>\n\n            <g transform=\"translate(450 152)\">\n                <polyline points=\"-15,-20 -35,-20 -35,40 25,40 25,20\" />\n                <rect x=\"-15\" y=\"-40\" width=\"60\" height=\"60\" />\n            </g>\n\n            <g transform=\"translate(50 352)\">\n                <polygon points=\"-35,-5 0,-40 35,-5\" />\n                <polygon points=\"-35,10 0,45 35,10\" />\n            </g>\n\n            <g transform=\"translate(75 250)\">\n                <polyline points=\"-30,30 -60,0 -30,-30\" />\n                <polyline points=\"0,30 -30,0 0,-30\" />\n            </g>\n\n            <g transform=\"translate(425 250) rotate(180)\">\n                <polyline points=\"-30,30 -60,0 -30,-30\" />\n                <polyline points=\"0,30 -30,0 0,-30\" />\n            </g>\n        </g>\n    </g>\n</svg>\n</a>\n</div>\n<div>\nLoading ITables v2.2.3 from the internet...\n(need <a href=https://mwouts.github.io/itables/troubleshooting.html>help</a>?)</td>\n</div>\n</tr></tbody>\n</table>\n<link href=\"https://www.unpkg.com/dt_for_itables@2.0.13/dt_bundle.css\" rel=\"stylesheet\">\n<script type=\"module\">\n    import {DataTable, jQuery as $} from 'https://www.unpkg.com/dt_for_itables@2.0.13/dt_bundle.js';\n\n    document.querySelectorAll(\"#itables_dbcb2604_659a_467a_867d_59610c0c2a44:not(.dataTable)\").forEach(table => {\n        if (!(table instanceof HTMLTableElement))\n            return;\n\n        // Define the table data\n        const data = [[\"x\", 10.0, 15.0, 5.0], [\"std\", 0.51, 0.5, 0.1]];\n\n        // Define the dt_args\n        let dt_args = {\"layout\": {\"topStart\": null, \"topEnd\": null, \"bottomStart\": null, \"bottomEnd\": null}, \"order\": [], \"warn_on_selected_rows_not_rendered\": true};\n        dt_args[\"data\"] = data;\n\n        \n        new DataTable(table, dt_args);\n    });\n</script>\n```\n:::\n:::\n\n\n## Rozkłady danych\n\nRozkłady danych wejściowych.\n\n::: {#cell-fig-1 .cell .fig-cap-location-margin message='false' execution_count=5}\n``` {.python .cell-code}\nfor i in range(n):\n    wykresy(i, x, sd)\n```\n\n::: {.cell-output .cell-output-display}\n![Rozkład wielkości x1](index_files/figure-html/fig-1-output-1.png){#fig-1 width=603 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![Rozkład wielkości x2](index_files/figure-html/fig-1-output-2.png){#fig-1 width=602 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![Rozkład wielkości x3](index_files/figure-html/fig-1-output-3.png){#fig-1 width=602 height=449}\n:::\n:::\n\n\n# Symulacja Monte Carlo\n\nZałożono liczbę losowań: $nn = 100 \\: 000$.\n\n## Wyniki symulacji Monte Carlo\n\n::: {#04eb94e9 .cell execution_count=6}\n``` {.python .cell-code}\nnn = 100000  # liczba losowań\n\ny = monte_carlo(n, nn, x, sd, parametry)  # symulacja Monte Carlo\n```\n:::\n\n\nWszystkie wyniki obliczeń modelu przedstawiono na rys. @fig-2. Poniżej wyznaczono ich wartość średnią i odchylenie standardowe.\n\n::: {#cell-fig-2 .cell .fig-cap-location-margin message='false' execution_count=7}\n``` {.python .cell-code}\nplt.scatter(range(len(y)), y, s=0.5, color=\"#54698a\")\nplt.xlabel(\"nr losowania\")\nplt.ylabel(\"y\")\nplt.title(\"Wynik zbiorczy symulacji Monte Carlo\")\nplt.show()\n\ny_av = np.mean(y)\nsd_y = np.std(y)\n\nprint(\"Uzyskana wartość średnia y_av = \", round(y_av,2))\nprint(\"Odchylenie standardowe sd_y = \", round(sd_y,2))\n```\n\n::: {.cell-output .cell-output-display}\n![Wyniki losowań w symulacji Monte Carlo ](index_files/figure-html/fig-2-output-1.png){#fig-2 width=595 height=449}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nUzyskana wartość średnia y_av =  682.43\nOdchylenie standardowe sd_y =  44.98\n```\n:::\n:::\n\n\n## Rozkład wielkości wynikowej\n\n@fig-3 przedstawia histogram i wykres kwantylowy $y$ w celu wizualnej oceny rozkładu wyniku.\n\n### Histogram i wykres kwantylowy\n\nHistogram pozwala ocenić symetryczność rozkładu, a wykres kwantylowy zgodność z rozkładem normalnym.\n\n::: {#cell-fig-3 .cell .fig-cap-location-margin message='false' execution_count=8}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nplt.hist(y, bins=30, color=\"#54698a\", alpha=0.7)\nplt.title(\"Histogram y\")\nplt.ylabel(\"częstość\")\nplt.xlabel(\"y\")\n\nyy = (y - y_av) / sd_y  # standaryzacja rozkładu\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.sort(norm.ppf(np.linspace(0.01, 0.99, len(yy)))), np.sort(yy), s=0.5, color=\"#54698a\")\nplt.title('Wykres kwantylowy Q-Q')\nplt.xlabel('kwantyle rozkładu normalnego')\nplt.ylabel('kwantyle rozkładu y')\nplt.plot([min(yy), max(yy)], [min(yy), max(yy)], color='#96cdf2')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Wizualne sprawdzenie normalności rozkładu y ](index_files/figure-html/fig-3-output-1.png){#fig-3 width=614 height=449}\n:::\n:::\n\n\n### Sprawdzanie normalności rozkładu y\n\nWynik $y$ liczy sobie 100 000 elementów, więc do oceny normalności jego rozkładu zastosowano test Kołmogorowa-Smirnowa.\n\n::: {#bf3c5d5e .cell execution_count=9}\n``` {.python .cell-code}\n# test Kołmogorowa-Smirnowa\nksx = ks_2samp(y, np.random.normal(y_av, sd_y, len(y)))\nksxp = ksx.pvalue\nprint(\"prawdopodobieństwo p_value = \", round(ksx.pvalue,4))\n\nif ksxp < 0.05:\n    print(\"\\nWedług testu Kołmogorowa-Smirnowa rozkład wielkości y nie jest normalny,\\nponieważ prawdopodobieństwo błędnego zanegowania jego normalności \\np_value jest < 0.05. \")\nelse:\n    print(\"Według testu Kołmogorowa-Smirnowa rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n\n# test Shapiro-Wilka\nif nn <= 5000:\n    swx = shapiro(y)\n    print(swx)\n\n    swxp = swx.pvalue\n\n    if swxp < 0.05:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y nie jest normalny\\n\\n\")\n    else:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nprawdopodobieństwo p_value =  0.004\n\nWedług testu Kołmogorowa-Smirnowa rozkład wielkości y nie jest normalny,\nponieważ prawdopodobieństwo błędnego zanegowania jego normalności \np_value jest < 0.05. \n```\n:::\n:::\n\n\n### Rozkład y\n\n@fig-4 przedstawia uzyskany rozkład gęstości prawdopodobieństwa $y$ i jego dystrybuantę.\n\n::: {#cell-fig-4 .cell .tbl-cap-location-margin message='false' execution_count=10}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nd = np.histogram(y, bins=50, density=True)\nplt.title(\"Rozkład y\")\nplt.xlabel(\"y\")\nplt.ylabel(\"gęstość prawdopodobieństwa\")\nplt.plot(d[1][:-1], d[0], color=\"#54698a\", lw=2)\n\nplt.subplot(1, 2, 2)\nplt.plot(d[1][:-1], np.cumsum(d[0]) / max(np.cumsum(d[0])), lw=2, color=\"#54698a\")\nplt.xlabel(\"y\")\nplt.ylabel(\"prawdopodobieństwo skumulowane\")\nplt.title(\"Dystrybuanta\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Rozkład wielkości y ](index_files/figure-html/fig-4-output-1.png){#fig-4 width=613 height=449}\n:::\n:::\n\n\n### Mediana, skośność i kurtoza\n\nW celu dodatkowej oceny rozbieżności z rozkładem normalnym wyznaczono medianę, skośność i kurtozę $y$.\n\n::: {#caf5f61b .cell execution_count=11}\n``` {.python .cell-code}\nfrom scipy.stats import skew\nfrom scipy.stats import kurtosis\n\n\nmed = np.median(y,  axis=0)\nprint(\"mediana = \", round(med,2))\n\nsk = skew(y, axis=0, bias=True)\nprint(\"skośność = \", round(sk,5))\n\nkurt = kurtosis(y, fisher=True, axis=0, bias=True) # kurtoza = 0 dla rozkłądu Gaussa\nprint(\"kurtoza = \", round(kurt,5))\n\nq_025 = np.quantile(y, 0.025)\nq_975 = np.quantile(y, 0.975)\n\nprint(\"kwantyl 0.025 = \", round(q_025,2))\nprint(\"kwantyl 0.975 = \", round(q_975,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmediana =  681.76\nskośność =  0.08682\nkurtoza =  0.01324\nkwantyl 0.025 =  596.13\nkwantyl 0.975 =  771.98\n```\n:::\n:::\n\n\n# Podsumowanie\n\nWszystkie dane wejściowe $x_1,\\: x_2$ i $x_3$ były zgodne z rozkładem Gaussa. Rozkład wielkości wynikowej $y$ lekko odstaje od rozkładu normalnego. Skośność rozkładu jest niewielka. Mediana prawie pokrywa się z wartością średnią. Kurtoza jest lekko dodatnia, co oznacza, że rozkład jest nieco bardziej smukły niż normalny. Rozbieżności od rozkładu normalnego występują w zkresie \"ogonów' rozkładu, co wyraźnie widać z wykresu Q-Q na rys. @fig-3. Wyniki są nieco bardziej skupione wokół wartości średniej niż w rozkładzie Gaussa.\n\nZmienność danych $x_1,\\: x_2$ i $x_3$ sprawia, że wynik działania modelu z 95% pewnością znajdzie się w zakresie od 596.13 do 771.98., czyli $y = 682.4_{-86.3}^{+89.6}$.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}