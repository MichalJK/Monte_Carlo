{
  "hash": "e5bf538fef46268a30f31166920eb2e2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle-block-banner: '#54698a'\ntitle-block-banner-color: '#dee1e3'\ntitle: Monte Carlo simulation\nsubtitle: Example\nauthor: Michał Kołodziejczyk\ndate: now\nformat:\n  html:\n    toc: true\n    toc-location: left\n    tbl-pos: H\n    code-fold: true\n    code-summary: 'Script:'\neditor: visual\ncss: styles.css\ncap-location: margin\n---\n\nMonte Carlo simulation is a method used to predict the probability of an outcome when there is variability in the data. The variability in the data can be described in several ways. Most commonly, statistical methods are used, and in the case of a quantity with a normal distribution, its variability is described by the mean and standard deviation.\n\nIn a Monte Carlo experiment, a large number of data are drawn from an assumed range of variability of a particular model quantity. These data are then used to generate a large number of model responses, and the resulting distribution of results is evaluated using statistical methods.\n\nThe idea of the Monte Carlo method is outlined in the figure below for a very simple model described by an ordinary function of several independent variables $x_i$. For the sake of simplicity, the distribution of each of these variables is assumed to be Gaussian.\n\n![The idea of the Monte Carlo method](idea.png){#fig-11 fig-align=\"center\" width=\"496\"}\n\nThe data sampling scheme is as follows:\n\n-   Using a random number generator, a probability $p$ is drawn for each input data $x_i$,\n-   Then the current value of the data $x_i$ is determined using the inverse Gaussian cumulative distribution function.\n\nThe figure below illustrates this process.\n\n![The data sampling scheme of $x_i$](sampling.png){#fig-22 fig-align=\"center\" width=\"490\"}\n\n# Functions\n\n## The model\n\nThe model is described by a function of three independent variables $x_1, x_2, x_3$:\n\n$y = a + b \\: sin(x_1) + c\\: x_2^2 + d \\: ln(x_3)$,\n\nwhere $a,\\: b,\\: c$ i $d$ are constant parameters.\n\n::: {#007a8d25 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, ks_2samp, shapiro\nimport math\n\n# model\ndef funkcja_model(param, x):\n    a = param[0]\n    b = param[1]\n    c = param[2]\n    d = param[3]\n    # model\n    y = a + b*math.sin(x[0]) + c * (x[1] ** 2) +d * math.log(x[2])\n    return y\n```\n:::\n\n\n## Charts\n\nThe 'wykresy' function plots the histogram, probability density distribution, and cumulative distribution of each variable. Normal distributions are assumed for simplicity.\n\n::: {#e474aa6c .cell execution_count=2}\n``` {.python .cell-code}\ndef wykresy(i, x, sd):\n        plt.subplot(1, 3, 1)\n        plt.hist(np.random.normal(x[i], sd[i], 10000), bins=30, alpha=0.7, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"frequency\")\n        plt.title(\"Histogram\")\n\n        xx = np.linspace(x[i] - 4 * sd[i], x[i] + 4 * sd[i], 100)\n        yy = norm.pdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 2)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"probability density\")\n        plt.title(f\"Distribution of x{i+1}\")\n\n        yy = norm.cdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 3)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"cumulative probability\")\n        plt.title(\"cdf\")\n        plt.show()\n```\n:::\n\n\n## Monte Carlo\n\nFunction that implements a Monte Carlo experiment. Formal parameters: n - number of variables $x_i$, nn - number of draws, x - mean values of the $x_i$, sd - their standard deviations, parametry - parameters of the function describing the model. The function uses a random number generator and the inverse function of the cumulative distribution function.\n\n::: {#00611348 .cell execution_count=3}\n``` {.python .cell-code}\ndef monte_carlo(n, nn, x, sd, parametry):\n    np.random.seed(7)\n    y = np.zeros(nn)\n    for i in range(nn):\n        los_x = np.zeros(n)\n        for j in range(n):\n            los_x[j] = norm.ppf(np.random.rand(), x[j], sd[j])\n        y[i] = funkcja_model(parametry, los_x)\n    return y\n```\n:::\n\n\n# The data\n\nExample data.\n\n::: {#038685e7 .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nfrom itables import show    \n\nn = 3  # the number of independent variables\nparametry = [1, 2, 3, 4]\n\nx1 = 10\nsd1 = 0.51\n\nx2 = 15\nsd2 = 0.5\n\nx3 = 5\nsd3 = 0.1\n\nx = [x1, x2, x3]\nsd = [sd1, sd2, sd3]\n\ndane_x = pd.DataFrame(x)\ndane_sd = pd.DataFrame(sd)\n\ndane = pd.concat([dane_x, dane_sd], axis=1)\ndane.columns = ['x','std']\ndane.index = ['x1','x2','x3']\n\nshow(np.transpose(dane))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table id=\"itables_b59aa2d0_18f8_433f_85fe_0d4282a50b19\" class=\"display nowrap\" data-quarto-disable-processing=\"true\" style=\"table-layout:auto;width:auto;margin:auto;caption-side:bottom\">\n<thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x1</th>\n      <th>x2</th>\n      <th>x3</th>\n    </tr>\n  </thead><tbody><tr>\n<td style=\"vertical-align:middle; text-align:left\">\n<div style=\"float:left; margin-right: 10px;\">\n<a href=https://mwouts.github.io/itables/><svg class=\"main-svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\nwidth=\"64\" viewBox=\"0 0 500 400\" style=\"font-family: 'Droid Sans', sans-serif;\">\n    <g style=\"fill:#d9d7fc\">\n        <path d=\"M100,400H500V357H100Z\" />\n        <path d=\"M100,300H400V257H100Z\" />\n        <path d=\"M0,200H400V157H0Z\" />\n        <path d=\"M100,100H500V57H100Z\" />\n        <path d=\"M100,350H500V307H100Z\" />\n        <path d=\"M100,250H400V207H100Z\" />\n        <path d=\"M0,150H400V107H0Z\" />\n        <path d=\"M100,50H500V7H100Z\" />\n    </g>\n    <g style=\"fill:#1a1366;stroke:#1a1366;\">\n   <rect x=\"100\" y=\"7\" width=\"400\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;400;0\"\n      dur=\"5s\"\n      repeatCount=\"indefinite\" />\n      <animate\n      attributeName=\"x\"\n      values=\"100;100;500\"\n      dur=\"5s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <rect x=\"0\" y=\"107\" width=\"400\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;400;0\"\n      dur=\"3.5s\"\n      repeatCount=\"indefinite\" />\n    <animate\n      attributeName=\"x\"\n      values=\"0;0;400\"\n      dur=\"3.5s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <rect x=\"100\" y=\"207\" width=\"300\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;300;0\"\n      dur=\"3s\"\n      repeatCount=\"indefinite\" />\n    <animate\n      attributeName=\"x\"\n      values=\"100;100;400\"\n      dur=\"3s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <rect x=\"100\" y=\"307\" width=\"400\" height=\"43\">\n    <animate\n      attributeName=\"width\"\n      values=\"0;400;0\"\n      dur=\"4s\"\n      repeatCount=\"indefinite\" />\n      <animate\n      attributeName=\"x\"\n      values=\"100;100;500\"\n      dur=\"4s\"\n      repeatCount=\"indefinite\" />\n  </rect>\n        <g style=\"fill:transparent;stroke-width:8; stroke-linejoin:round\" rx=\"5\">\n            <g transform=\"translate(45 50) rotate(-45)\">\n                <circle r=\"33\" cx=\"0\" cy=\"0\" />\n                <rect x=\"-8\" y=\"32\" width=\"16\" height=\"30\" />\n            </g>\n\n            <g transform=\"translate(450 152)\">\n                <polyline points=\"-15,-20 -35,-20 -35,40 25,40 25,20\" />\n                <rect x=\"-15\" y=\"-40\" width=\"60\" height=\"60\" />\n            </g>\n\n            <g transform=\"translate(50 352)\">\n                <polygon points=\"-35,-5 0,-40 35,-5\" />\n                <polygon points=\"-35,10 0,45 35,10\" />\n            </g>\n\n            <g transform=\"translate(75 250)\">\n                <polyline points=\"-30,30 -60,0 -30,-30\" />\n                <polyline points=\"0,30 -30,0 0,-30\" />\n            </g>\n\n            <g transform=\"translate(425 250) rotate(180)\">\n                <polyline points=\"-30,30 -60,0 -30,-30\" />\n                <polyline points=\"0,30 -30,0 0,-30\" />\n            </g>\n        </g>\n    </g>\n</svg>\n</a>\n</div>\n<div>\nLoading ITables v2.2.3 from the internet...\n(need <a href=https://mwouts.github.io/itables/troubleshooting.html>help</a>?)</td>\n</div>\n</tr></tbody>\n</table>\n<link href=\"https://www.unpkg.com/dt_for_itables@2.0.13/dt_bundle.css\" rel=\"stylesheet\">\n<script type=\"module\">\n    import {DataTable, jQuery as $} from 'https://www.unpkg.com/dt_for_itables@2.0.13/dt_bundle.js';\n\n    document.querySelectorAll(\"#itables_b59aa2d0_18f8_433f_85fe_0d4282a50b19:not(.dataTable)\").forEach(table => {\n        if (!(table instanceof HTMLTableElement))\n            return;\n\n        // Define the table data\n        const data = [[\"x\", 10.0, 15.0, 5.0], [\"std\", 0.51, 0.5, 0.1]];\n\n        // Define the dt_args\n        let dt_args = {\"layout\": {\"topStart\": null, \"topEnd\": null, \"bottomStart\": null, \"bottomEnd\": null}, \"order\": [], \"warn_on_selected_rows_not_rendered\": true};\n        dt_args[\"data\"] = data;\n\n        \n        new DataTable(table, dt_args);\n    });\n</script>\n```\n:::\n:::\n\n\n## Data distributions\n\nInput data distributions.\n\n::: {#cell-fig-1 .cell .fig-cap-location-margin message='false' execution_count=5}\n``` {.python .cell-code}\nfor i in range(n):\n    wykresy(i, x, sd)\n```\n\n::: {.cell-output .cell-output-display}\n![Distribution of x1](index_en_files/figure-html/fig-1-output-1.png){#fig-1 width=602 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![Distribution of x2](index_en_files/figure-html/fig-1-output-2.png){#fig-1 width=601 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![Distribution of x3](index_en_files/figure-html/fig-1-output-3.png){#fig-1 width=593 height=449}\n:::\n:::\n\n\n# Monte Carlo Simulation\n\nNumber of draws assumed: $nn = 100 \\: 000$.\n\n## Monte Carlo simulation results\n\n::: {#c407d9c4 .cell execution_count=6}\n``` {.python .cell-code}\nnn = 100000  # the number od draws\n\ny = monte_carlo(n, nn, x, sd, parametry)  #  Monte Carlo simulation\n```\n:::\n\n\nAll the results of the model calculations are shown in @fig-2 . Their mean and standard deviation are given below.\n\n::: {#cell-fig-2 .cell .fig-cap-location-margin message='false' execution_count=7}\n``` {.python .cell-code}\nplt.scatter(range(len(y)), y, s=0.5, color=\"#54698a\")\nplt.xlabel(\"draw number\")\nplt.ylabel(\"y\")\nplt.title(\"Summary Result of Monte Carlo Simulation\")\nplt.show()\n\ny_av = np.mean(y)\nsd_y = np.std(y)\n\nprint(\"The resulting mean y_av = \", round(y_av,2))\nprint(\"Standard deviation sd_y = \", round(sd_y,2))\n```\n\n::: {.cell-output .cell-output-display}\n![Results of sampling in Monte Carlo simulation ](index_en_files/figure-html/fig-2-output-1.png){#fig-2 width=595 height=449}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nThe resulting mean y_av =  682.43\nStandard deviation sd_y =  44.98\n```\n:::\n:::\n\n\n## Distribution of the resulting quantity\n\n@fig-3 shows a histogram and a $y$ quantile plot for visual evaluation of the distribution.\n\n### Histogram and quantile plot\n\nThe histogram allows you to assess the symmetry of the distribution, and the quantile plot allows you to assess whether the distribution is normal.\n\n::: {#cell-fig-3 .cell .fig-cap-location-margin message='false' execution_count=8}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nplt.hist(y, bins=30, color=\"#54698a\", alpha=0.7)\nplt.title(\"Histogram of y\")\nplt.ylabel(\"frequency\")\nplt.xlabel(\"y\")\n\nyy = (y - y_av) / sd_y  # Standardization of distribution\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.sort(norm.ppf(np.linspace(0.01, 0.99, len(yy)))), np.sort(yy), s=0.5, color=\"#54698a\")\nplt.title('Quantile plot Q-Q')\nplt.xlabel('quantiles of the normal distribution')\nplt.ylabel('quantiles of the y-distribution')\nplt.plot([min(yy), max(yy)], [min(yy), max(yy)], color='#96cdf2')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Visual check of the normality of the y-distribution ](index_en_files/figure-html/fig-3-output-1.png){#fig-3 width=613 height=449}\n:::\n:::\n\n\n### Check the normality of the y-distribution\n\nThe $y$ has 100,000 elements, so the Kolmogorov-Smirnov test was used to assess the normality of its distribution..\n\n::: {#13ec9b71 .cell execution_count=9}\n``` {.python .cell-code}\n# Kolmogorow-Smirnow test\nksx = ks_2samp(y, np.random.normal(y_av, sd_y, len(y)))\nksxp = ksx.pvalue\nprint(\" p_value = \", round(ksx.pvalue,4))\n\nif ksxp < 0.05:\n    print(\"\\nAccording to the Kolmogorov-Smirnov test, the distribution of y-size is not normal,\\nbecause the probability of falsely negating its normality  \\np_value is < 0.05. \")\nelse:\n    print(\"According to the Kolmogorov-Smirnov test, the distribution of y is normal (the normality of the distribution cannot be denied)\\n\\n\")\n\n# Shapiro-Wilka test\nif nn <= 5000:\n    swx = shapiro(y)\n    print(swx)\n\n    swxp = swx.pvalue\n\n    if swxp < 0.05:\n        print(\"According to the Shapiro-Wilk test, the distribution of y-size is not normal\\n\\n\")\n    else:\n        print(\"According to the Shapiro-Wilk test, the distribution of y is normal (the normality of the distribution cannot be denied)\\n\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n p_value =  0.004\n\nAccording to the Kolmogorov-Smirnov test, the distribution of y-size is not normal,\nbecause the probability of falsely negating its normality  \np_value is < 0.05. \n```\n:::\n:::\n\n\n### The distribution of y\n\n@fig-4 represents the obtained probability density distribution $y$ and its cumulative distribution function.\n\n::: {#cell-fig-4 .cell .tbl-cap-location-margin message='false' execution_count=10}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nd = np.histogram(y, bins=50, density=True)\nplt.title(\"The distribution of y\")\nplt.xlabel(\"y\")\nplt.ylabel(\"probability density\")\nplt.plot(d[1][:-1], d[0], color=\"#54698a\", lw=2)\n\nplt.subplot(1, 2, 2)\nplt.plot(d[1][:-1], np.cumsum(d[0]) / max(np.cumsum(d[0])), lw=2, color=\"#54698a\")\nplt.xlabel(\"y\")\nplt.ylabel(\"cumulative probability\")\nplt.title(\"Cumulative distribution function\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![The distribution of y ](index_en_files/figure-html/fig-4-output-1.png){#fig-4 width=616 height=449}\n:::\n:::\n\n\n### Median, skewness and kurtosis\n\nThe median, skewness, and kurtosis of $y$ were determined to further assess the deviation from the normal distribution.\n\n::: {#a2226eb6 .cell execution_count=11}\n``` {.python .cell-code}\nfrom scipy.stats import skew\nfrom scipy.stats import kurtosis\n\n\nmed = np.median(y,  axis=0)\nprint(\"Median = \", round(med,2))\n\nsk = skew(y, axis=0, bias=True)\nprint(\"Skewness = \", round(sk,5))\n\nkurt = kurtosis(y, fisher=True, axis=0, bias=True) # kurtoza = 0 dla rozkłądu Gaussa\nprint(\"Kortosis = \", round(kurt,5))\n\nq_025 = np.quantile(y, 0.025)\nq_975 = np.quantile(y, 0.975)\n\nprint(\"0.025 quantile = \", round(q_025,2))\nprint(\"0.975 quantile = \", round(q_975,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMedian =  681.76\nSkewness =  0.08682\nKortosis =  0.01324\n0.025 quantile =  596.13\n0.975 quantile =  771.98\n```\n:::\n:::\n\n\n# Conclusion\n\nAll inputs $x_1,\\: x_2$ and $x_3$ follow a Gaussian distribution. The distribution of the result $y$ deviates slightly from the normal distribution. The skewness is small. The median is close to the mean. The kurtosis is slightly positive, which means that the distribution is slightly narrower than normal. The deviation from the normal distribution occurs in the 'tails' of the distribution, as can be clearly seen in the Q-Q plot in @fig-3 . The results are slightly more assembled around the mean than with the Gaussian distribution.\n\nThe variability of the data $x_1,\\: x_2$ and $x_3$ means that the result of the model's performance will be in the range of 596.13 to 771.98 with 95% confidence, i.e. $y = 682.4_{-86.3}^{+89.6}$.\n\n",
    "supporting": [
      "index_en_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}