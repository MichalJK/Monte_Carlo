{"title":"Symulacja Monte Carlo","markdown":{"yaml":{"title-block-banner":"#54698a","title-block-banner-color":"#dee1e3","title":"Symulacja Monte Carlo","subtitle":"przykład","author":"Michał Kołodziejczyk","date":"now","format":{"html":{"toc":true,"toc-location":"left","tbl-pos":"H","code-fold":true,"code-summary":"Skrypt:"}},"editor":"visual","css":"styles.css","jupyter":"python3","cap-location":"margin"},"headingText":"Funkcje","containsRefs":false,"markdown":"\n\nSymulacja Monte Carlo to metoda używana do przewidywania prawdopodobieństwa wyniku, gdy występuje zmienność danych. Zmienność danych może być opisana w różny sposób. Najczęściej wykorzystuje się metody statystyczne i w przypadku, gdy dana wielkość posiada rozkład normalny, jego zmienność opisuje wartość średnia i odchylenie standardowe.\n\nEksperyment Monte Carlo polega na losowaniu dużej liczby danych z założonego zakresu zmienności poszczególnej wielkości modelowej. Następnie wykorzystuje się je do wygenerowania dużej liczby odpowiedzi modelu i w rezultacie, do oceny uzyskanego rozkładu wyników metodami statystycznymi.\n\nIdea metody Monte Carlo została naszkicowana na poniższym rysunku dla bardzo prostego modelu opisanego zwykłą funkcją kilku zmiennych niezależnych $x_i$. W przedstawionym przykładzie założono dla uproszczenia, że rozkład każdej z nich jest zgodny z rozkładem Gaussa.\n\n![Szkic metody Monte Carlo](szkic.png){#fig-11 fig-align=\"center\" width=\"439\"}\n\nSchemat losowania danych jest następujący:\n\n-   z pomocą generatora liczb losowych losuje się prawdopodobieństwo $p$ dla każdej danej wejściowej $x_i$,\n\n-   następnie z pomocą funkcji odwrotnej skumulowanego rozkładu Gaussa wyznacza się bieżącą wartość danej $x_i$. Poniższy rysunek ilustruje ten proces.\n\n![Schemat losowania wartości $x_i$](losowanie.png){#fig-22 fig-align=\"center\" width=\"373\"}\n\n\n## Model\n\nModel opisany jest funkcją trzech zmiennych niezależnych $x_1, x_2, x_3$:\n\n$y = a + b \\: sin(x_1) + c\\: x_2^2 + d \\: ln(x_3)$,\n\ngdzie $a,\\: b,\\: c$ i $d$ są stałymi parametrami.\n\n```{python}\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, ks_2samp, shapiro\nimport math\n\n# model\ndef funkcja_model(param, x):\n    a = param[0]\n    b = param[1]\n    c = param[2]\n    d = param[3]\n    # model\n    y = a + b*math.sin(x[0]) + c * (x[1] ** 2) +d * math.log(x[2])\n    return y\n\n```\n\n## Wykresy\n\nFunkcja 'wykresy' kreśli histogram, rozkład gęstości prawdopodobieństwa i dystrybuantę każdej danej. Dla uproszczenia założono rozkłady normalne.\n\n```{python}\n\ndef wykresy(i, x, sd):\n        plt.subplot(1, 3, 1)\n        plt.hist(np.random.normal(x[i], sd[i], 10000), bins=30, alpha=0.7, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"częstość\")\n        plt.title(\"Histogram\")\n\n        xx = np.linspace(x[i] - 4 * sd[i], x[i] + 4 * sd[i], 100)\n        yy = norm.pdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 2)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"gęstość prawdopodobieństwa\")\n        plt.title(f\"Rozkład x{i+1}\")\n\n        yy = norm.cdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 3)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"prawdopodobieństwo skumulowane\")\n        plt.title(\"Dystrybuanta\")\n        plt.show()\n\n```\n\n## Monte Carlo\n\nFunkcja realizująca eksperyment Monte Carlo. Parametry formalne: n - liczba zmiennych $x_i$, nn - liczba losowań, x - wartości średnie danych, sd - ich odchylenia standardowe, parametry - parametry funkcji opisującej model. Funkcja wykorzystuje generator liczb losowych i funkcję odwrotną dystrybuanty.\n\n```{python}\n\ndef monte_carlo(n, nn, x, sd, parametry):\n    np.random.seed(7)\n    y = np.zeros(nn)\n    for i in range(nn):\n        los_x = np.zeros(n)\n        for j in range(n):\n            los_x[j] = norm.ppf(np.random.rand(), x[j], sd[j])\n        y[i] = funkcja_model(parametry, los_x)\n    return y\n\n```\n\n# Dane\n\nPrzykładowe dane.\n\n```{python}\nimport pandas as pd\nfrom itables import show    \n\nn = 3  # liczba zmiennych niezależnych\nparametry = [1, 2, 3, 4]\n\nx1 = 10\nsd1 = 0.51\n\nx2 = 15\nsd2 = 0.5\n\nx3 = 5\nsd3 = 0.1\n\nx = [x1, x2, x3]\nsd = [sd1, sd2, sd3]\n\ndane_x = pd.DataFrame(x)\ndane_sd = pd.DataFrame(sd)\n\ndane = pd.concat([dane_x, dane_sd], axis=1)\ndane.columns = ['x','std']\ndane.index = ['x1','x2','x3']\n\nshow(np.transpose(dane))\n\n```\n\n## Rozkłady danych\n\nRozkłady danych wejściowych.\n\n```{python}\n#| label: fig-1\n#| fig-cap: \n#|   - \"Rozkład wielkości x1\"\n#|   - \"Rozkład wielkości x2\"\n#|   - \"Rozkład wielkości x3\"\n#| fig-cap-location: margin\n#| message: false\n#| warning: false\n\nfor i in range(n):\n    wykresy(i, x, sd)\n\n```\n\n# Symulacja Monte Carlo\n\nZałożono liczbę losowań: $nn = 100 \\: 000$.\n\n## Wyniki symulacji Monte Carlo\n\n```{python}\n\nnn = 100000  # liczba losowań\n\ny = monte_carlo(n, nn, x, sd, parametry)  # symulacja Monte Carlo\n\n```\n\nWszystkie wyniki obliczeń modelu przedstawiono na rys. @fig-2. Poniżej wyznaczono ich wartość średnią i odchylenie standardowe.\n\n```{python}\n#| label: fig-2\n#| fig-cap: \"Wyniki losowań w symulacji Monte Carlo \"\n#| fig-cap-location: margin\n#| message: false\n#| warning: false\n\nplt.scatter(range(len(y)), y, s=0.5, color=\"#54698a\")\nplt.xlabel(\"nr losowania\")\nplt.ylabel(\"y\")\nplt.title(\"Wynik zbiorczy symulacji Monte Carlo\")\nplt.show()\n\ny_av = np.mean(y)\nsd_y = np.std(y)\n\nprint(\"Uzyskana wartość średnia y_av = \", round(y_av,2))\nprint(\"Odchylenie standardowe sd_y = \", round(sd_y,2))\n\n```\n\n## Rozkład wielkości wynikowej\n\n@fig-3 przedstawia histogram i wykres kwantylowy $y$ w celu wizualnej oceny rozkładu wyniku.\n\n### Histogram i wykres kwantylowy\n\nHistogram pozwala ocenić symetryczność rozkładu, a wykres kwantylowy zgodność z rozkładem normalnym.\n\n```{python}\n#| label: fig-3\n#| fig-cap: \"Wizualne sprawdzenie normalności rozkładu y \"\n#| fig-cap-location: margin\n#| message: false\n#| warning: false\n\nplt.subplot(1, 2, 1)\nplt.hist(y, bins=30, color=\"#54698a\", alpha=0.7)\nplt.title(\"Histogram y\")\nplt.ylabel(\"częstość\")\nplt.xlabel(\"y\")\n\nyy = (y - y_av) / sd_y  # standaryzacja rozkładu\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.sort(norm.ppf(np.linspace(0.01, 0.99, len(yy)))), np.sort(yy), s=0.5, color=\"#54698a\")\nplt.title('Wykres kwantylowy Q-Q')\nplt.xlabel('kwantyle rozkładu normalnego')\nplt.ylabel('kwantyle rozkładu y')\nplt.plot([min(yy), max(yy)], [min(yy), max(yy)], color='#96cdf2')\nplt.show()\n\n```\n\n### Sprawdzanie normalności rozkładu y\n\nWynik $y$ liczy sobie 100 000 elementów, więc do oceny normalności jego rozkładu zastosowano test Kołmogorowa-Smirnowa.\n\n```{python}\n\n# test Kołmogorowa-Smirnowa\nksx = ks_2samp(y, np.random.normal(y_av, sd_y, len(y)))\nksxp = ksx.pvalue\nprint(\"prawdopodobieństwo p_value = \", round(ksx.pvalue,4))\n\nif ksxp < 0.05:\n    print(\"\\nWedług testu Kołmogorowa-Smirnowa rozkład wielkości y nie jest normalny,\\nponieważ prawdopodobieństwo błędnego zanegowania jego normalności \\np_value jest < 0.05. \")\nelse:\n    print(\"Według testu Kołmogorowa-Smirnowa rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n\n# test Shapiro-Wilka\nif nn <= 5000:\n    swx = shapiro(y)\n    print(swx)\n\n    swxp = swx.pvalue\n\n    if swxp < 0.05:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y nie jest normalny\\n\\n\")\n    else:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n\n```\n\n### Rozkład y\n\n@fig-4 przedstawia uzyskany rozkład gęstości prawdopodobieństwa $y$ i jego dystrybuantę.\n\n```{python}\n#| label: fig-4\n#| fig-cap: \"Rozkład wielkości y \"\n#| tbl-cap-location: margin\n#| message: false\n#| warning: false\n\nplt.subplot(1, 2, 1)\nd = np.histogram(y, bins=50, density=True)\nplt.title(\"Rozkład y\")\nplt.xlabel(\"y\")\nplt.ylabel(\"gęstość prawdopodobieństwa\")\nplt.plot(d[1][:-1], d[0], color=\"#54698a\", lw=2)\n\nplt.subplot(1, 2, 2)\nplt.plot(d[1][:-1], np.cumsum(d[0]) / max(np.cumsum(d[0])), lw=2, color=\"#54698a\")\nplt.xlabel(\"y\")\nplt.ylabel(\"prawdopodobieństwo skumulowane\")\nplt.title(\"Dystrybuanta\")\nplt.show()\n\n```\n\n### Mediana, skośność i kurtoza\n\nW celu dodatkowej oceny rozbieżności z rozkładem normalnym wyznaczono medianę, skośność i kurtozę $y$.\n\n```{python}\n\nfrom scipy.stats import skew\nfrom scipy.stats import kurtosis\n\n\nmed = np.median(y,  axis=0)\nprint(\"mediana = \", round(med,2))\n\nsk = skew(y, axis=0, bias=True)\nprint(\"skośność = \", round(sk,5))\n\nkurt = kurtosis(y, fisher=True, axis=0, bias=True) # kurtoza = 0 dla rozkłądu Gaussa\nprint(\"kurtoza = \", round(kurt,5))\n\nq_025 = np.quantile(y, 0.025)\nq_975 = np.quantile(y, 0.975)\n\nprint(\"kwantyl 0.025 = \", round(q_025,2))\nprint(\"kwantyl 0.975 = \", round(q_975,2))\n```\n\n# Podsumowanie\n\nWszystkie dane wejściowe $x_1,\\: x_2$ i $x_3$ były zgodne z rozkładem Gaussa. Rozkład wielkości wynikowej $y$ lekko odstaje od rozkładu normalnego. Skośność rozkładu jest niewielka. Mediana prawie pokrywa się z wartością średnią. Kurtoza jest lekko dodatnia, co oznacza, że rozkład jest nieco bardziej smukły niż normalny. Rozbieżności od rozkładu normalnego występują w zkresie \"ogonów' rozkładu, co wyraźnie widać z wykresu Q-Q na rys. @fig-3. Wyniki są nieco bardziej skupione wokół wartości średniej niż w rozkładzie Gaussa.\n\nZmienność danych $x_1,\\: x_2$ i $x_3$ sprawia, że wynik działania modelu z 95% pewnością znajdzie się w zakresie od 596.13 do 771.98., czyli $y = 682.4_{-86.3}^{+89.6}$.\n","srcMarkdownNoYaml":"\n\nSymulacja Monte Carlo to metoda używana do przewidywania prawdopodobieństwa wyniku, gdy występuje zmienność danych. Zmienność danych może być opisana w różny sposób. Najczęściej wykorzystuje się metody statystyczne i w przypadku, gdy dana wielkość posiada rozkład normalny, jego zmienność opisuje wartość średnia i odchylenie standardowe.\n\nEksperyment Monte Carlo polega na losowaniu dużej liczby danych z założonego zakresu zmienności poszczególnej wielkości modelowej. Następnie wykorzystuje się je do wygenerowania dużej liczby odpowiedzi modelu i w rezultacie, do oceny uzyskanego rozkładu wyników metodami statystycznymi.\n\nIdea metody Monte Carlo została naszkicowana na poniższym rysunku dla bardzo prostego modelu opisanego zwykłą funkcją kilku zmiennych niezależnych $x_i$. W przedstawionym przykładzie założono dla uproszczenia, że rozkład każdej z nich jest zgodny z rozkładem Gaussa.\n\n![Szkic metody Monte Carlo](szkic.png){#fig-11 fig-align=\"center\" width=\"439\"}\n\nSchemat losowania danych jest następujący:\n\n-   z pomocą generatora liczb losowych losuje się prawdopodobieństwo $p$ dla każdej danej wejściowej $x_i$,\n\n-   następnie z pomocą funkcji odwrotnej skumulowanego rozkładu Gaussa wyznacza się bieżącą wartość danej $x_i$. Poniższy rysunek ilustruje ten proces.\n\n![Schemat losowania wartości $x_i$](losowanie.png){#fig-22 fig-align=\"center\" width=\"373\"}\n\n# Funkcje\n\n## Model\n\nModel opisany jest funkcją trzech zmiennych niezależnych $x_1, x_2, x_3$:\n\n$y = a + b \\: sin(x_1) + c\\: x_2^2 + d \\: ln(x_3)$,\n\ngdzie $a,\\: b,\\: c$ i $d$ są stałymi parametrami.\n\n```{python}\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, ks_2samp, shapiro\nimport math\n\n# model\ndef funkcja_model(param, x):\n    a = param[0]\n    b = param[1]\n    c = param[2]\n    d = param[3]\n    # model\n    y = a + b*math.sin(x[0]) + c * (x[1] ** 2) +d * math.log(x[2])\n    return y\n\n```\n\n## Wykresy\n\nFunkcja 'wykresy' kreśli histogram, rozkład gęstości prawdopodobieństwa i dystrybuantę każdej danej. Dla uproszczenia założono rozkłady normalne.\n\n```{python}\n\ndef wykresy(i, x, sd):\n        plt.subplot(1, 3, 1)\n        plt.hist(np.random.normal(x[i], sd[i], 10000), bins=30, alpha=0.7, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"częstość\")\n        plt.title(\"Histogram\")\n\n        xx = np.linspace(x[i] - 4 * sd[i], x[i] + 4 * sd[i], 100)\n        yy = norm.pdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 2)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"gęstość prawdopodobieństwa\")\n        plt.title(f\"Rozkład x{i+1}\")\n\n        yy = norm.cdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 3)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"prawdopodobieństwo skumulowane\")\n        plt.title(\"Dystrybuanta\")\n        plt.show()\n\n```\n\n## Monte Carlo\n\nFunkcja realizująca eksperyment Monte Carlo. Parametry formalne: n - liczba zmiennych $x_i$, nn - liczba losowań, x - wartości średnie danych, sd - ich odchylenia standardowe, parametry - parametry funkcji opisującej model. Funkcja wykorzystuje generator liczb losowych i funkcję odwrotną dystrybuanty.\n\n```{python}\n\ndef monte_carlo(n, nn, x, sd, parametry):\n    np.random.seed(7)\n    y = np.zeros(nn)\n    for i in range(nn):\n        los_x = np.zeros(n)\n        for j in range(n):\n            los_x[j] = norm.ppf(np.random.rand(), x[j], sd[j])\n        y[i] = funkcja_model(parametry, los_x)\n    return y\n\n```\n\n# Dane\n\nPrzykładowe dane.\n\n```{python}\nimport pandas as pd\nfrom itables import show    \n\nn = 3  # liczba zmiennych niezależnych\nparametry = [1, 2, 3, 4]\n\nx1 = 10\nsd1 = 0.51\n\nx2 = 15\nsd2 = 0.5\n\nx3 = 5\nsd3 = 0.1\n\nx = [x1, x2, x3]\nsd = [sd1, sd2, sd3]\n\ndane_x = pd.DataFrame(x)\ndane_sd = pd.DataFrame(sd)\n\ndane = pd.concat([dane_x, dane_sd], axis=1)\ndane.columns = ['x','std']\ndane.index = ['x1','x2','x3']\n\nshow(np.transpose(dane))\n\n```\n\n## Rozkłady danych\n\nRozkłady danych wejściowych.\n\n```{python}\n#| label: fig-1\n#| fig-cap: \n#|   - \"Rozkład wielkości x1\"\n#|   - \"Rozkład wielkości x2\"\n#|   - \"Rozkład wielkości x3\"\n#| fig-cap-location: margin\n#| message: false\n#| warning: false\n\nfor i in range(n):\n    wykresy(i, x, sd)\n\n```\n\n# Symulacja Monte Carlo\n\nZałożono liczbę losowań: $nn = 100 \\: 000$.\n\n## Wyniki symulacji Monte Carlo\n\n```{python}\n\nnn = 100000  # liczba losowań\n\ny = monte_carlo(n, nn, x, sd, parametry)  # symulacja Monte Carlo\n\n```\n\nWszystkie wyniki obliczeń modelu przedstawiono na rys. @fig-2. Poniżej wyznaczono ich wartość średnią i odchylenie standardowe.\n\n```{python}\n#| label: fig-2\n#| fig-cap: \"Wyniki losowań w symulacji Monte Carlo \"\n#| fig-cap-location: margin\n#| message: false\n#| warning: false\n\nplt.scatter(range(len(y)), y, s=0.5, color=\"#54698a\")\nplt.xlabel(\"nr losowania\")\nplt.ylabel(\"y\")\nplt.title(\"Wynik zbiorczy symulacji Monte Carlo\")\nplt.show()\n\ny_av = np.mean(y)\nsd_y = np.std(y)\n\nprint(\"Uzyskana wartość średnia y_av = \", round(y_av,2))\nprint(\"Odchylenie standardowe sd_y = \", round(sd_y,2))\n\n```\n\n## Rozkład wielkości wynikowej\n\n@fig-3 przedstawia histogram i wykres kwantylowy $y$ w celu wizualnej oceny rozkładu wyniku.\n\n### Histogram i wykres kwantylowy\n\nHistogram pozwala ocenić symetryczność rozkładu, a wykres kwantylowy zgodność z rozkładem normalnym.\n\n```{python}\n#| label: fig-3\n#| fig-cap: \"Wizualne sprawdzenie normalności rozkładu y \"\n#| fig-cap-location: margin\n#| message: false\n#| warning: false\n\nplt.subplot(1, 2, 1)\nplt.hist(y, bins=30, color=\"#54698a\", alpha=0.7)\nplt.title(\"Histogram y\")\nplt.ylabel(\"częstość\")\nplt.xlabel(\"y\")\n\nyy = (y - y_av) / sd_y  # standaryzacja rozkładu\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.sort(norm.ppf(np.linspace(0.01, 0.99, len(yy)))), np.sort(yy), s=0.5, color=\"#54698a\")\nplt.title('Wykres kwantylowy Q-Q')\nplt.xlabel('kwantyle rozkładu normalnego')\nplt.ylabel('kwantyle rozkładu y')\nplt.plot([min(yy), max(yy)], [min(yy), max(yy)], color='#96cdf2')\nplt.show()\n\n```\n\n### Sprawdzanie normalności rozkładu y\n\nWynik $y$ liczy sobie 100 000 elementów, więc do oceny normalności jego rozkładu zastosowano test Kołmogorowa-Smirnowa.\n\n```{python}\n\n# test Kołmogorowa-Smirnowa\nksx = ks_2samp(y, np.random.normal(y_av, sd_y, len(y)))\nksxp = ksx.pvalue\nprint(\"prawdopodobieństwo p_value = \", round(ksx.pvalue,4))\n\nif ksxp < 0.05:\n    print(\"\\nWedług testu Kołmogorowa-Smirnowa rozkład wielkości y nie jest normalny,\\nponieważ prawdopodobieństwo błędnego zanegowania jego normalności \\np_value jest < 0.05. \")\nelse:\n    print(\"Według testu Kołmogorowa-Smirnowa rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n\n# test Shapiro-Wilka\nif nn <= 5000:\n    swx = shapiro(y)\n    print(swx)\n\n    swxp = swx.pvalue\n\n    if swxp < 0.05:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y nie jest normalny\\n\\n\")\n    else:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n\n```\n\n### Rozkład y\n\n@fig-4 przedstawia uzyskany rozkład gęstości prawdopodobieństwa $y$ i jego dystrybuantę.\n\n```{python}\n#| label: fig-4\n#| fig-cap: \"Rozkład wielkości y \"\n#| tbl-cap-location: margin\n#| message: false\n#| warning: false\n\nplt.subplot(1, 2, 1)\nd = np.histogram(y, bins=50, density=True)\nplt.title(\"Rozkład y\")\nplt.xlabel(\"y\")\nplt.ylabel(\"gęstość prawdopodobieństwa\")\nplt.plot(d[1][:-1], d[0], color=\"#54698a\", lw=2)\n\nplt.subplot(1, 2, 2)\nplt.plot(d[1][:-1], np.cumsum(d[0]) / max(np.cumsum(d[0])), lw=2, color=\"#54698a\")\nplt.xlabel(\"y\")\nplt.ylabel(\"prawdopodobieństwo skumulowane\")\nplt.title(\"Dystrybuanta\")\nplt.show()\n\n```\n\n### Mediana, skośność i kurtoza\n\nW celu dodatkowej oceny rozbieżności z rozkładem normalnym wyznaczono medianę, skośność i kurtozę $y$.\n\n```{python}\n\nfrom scipy.stats import skew\nfrom scipy.stats import kurtosis\n\n\nmed = np.median(y,  axis=0)\nprint(\"mediana = \", round(med,2))\n\nsk = skew(y, axis=0, bias=True)\nprint(\"skośność = \", round(sk,5))\n\nkurt = kurtosis(y, fisher=True, axis=0, bias=True) # kurtoza = 0 dla rozkłądu Gaussa\nprint(\"kurtoza = \", round(kurt,5))\n\nq_025 = np.quantile(y, 0.025)\nq_975 = np.quantile(y, 0.975)\n\nprint(\"kwantyl 0.025 = \", round(q_025,2))\nprint(\"kwantyl 0.975 = \", round(q_975,2))\n```\n\n# Podsumowanie\n\nWszystkie dane wejściowe $x_1,\\: x_2$ i $x_3$ były zgodne z rozkładem Gaussa. Rozkład wielkości wynikowej $y$ lekko odstaje od rozkładu normalnego. Skośność rozkładu jest niewielka. Mediana prawie pokrywa się z wartością średnią. Kurtoza jest lekko dodatnia, co oznacza, że rozkład jest nieco bardziej smukły niż normalny. Rozbieżności od rozkładu normalnego występują w zkresie \"ogonów' rozkładu, co wyraźnie widać z wykresu Q-Q na rys. @fig-3. Wyniki są nieco bardziej skupione wokół wartości średniej niż w rozkładzie Gaussa.\n\nZmienność danych $x_1,\\: x_2$ i $x_3$ sprawia, że wynik działania modelu z 95% pewnością znajdzie się w zakresie od 596.13 do 771.98., czyli $y = 682.4_{-86.3}^{+89.6}$.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Spis treści","toc-title-website":"Na tej stronie","related-formats-title":"Inne formaty","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Źródło","other-links-title":"Inne odnośniki","code-links-title":"Linki do kodu","launch-dev-container-title":"Uruchom Dev Container","launch-binder-title":"Uruchom Binder","article-notebook-label":"Notatnik artykułu","notebook-preview-download":"Pobierz notatnik","notebook-preview-download-src":"Pobierz kod źródłowy","notebook-preview-back":"Powrót do artykułu","manuscript-meca-bundle":"Archiwum MECA","section-title-abstract":"Abstrakt","section-title-appendices":"Załączniki","section-title-footnotes":"Przypisy","section-title-references":"Bibliografia","section-title-reuse":"Licencja","section-title-copyright":"Prawa autorskie","section-title-citation":"Cytowanie","appendix-attribution-cite-as":"W celu atrybucji, proszę cytować tę pracę jako:","appendix-attribution-bibtex":"cytowanie BibTeX:","title-block-author-single":"Autor","title-block-author-plural":"Autorzy","title-block-affiliation-single":"Afiliacja","title-block-affiliation-plural":"Afiliacje","title-block-published":"Opublikowano","title-block-modified":"Zmodyfikowano","title-block-keywords":"Słowa kluczowe","callout-tip-title":"Wskazówka","callout-note-title":"Adnotacja","callout-warning-title":"Ostrzeżenie","callout-important-title":"Ważne","callout-caution-title":"Zagrożenie","code-summary":"Kod","code-tools-menu-caption":"Kod","code-tools-show-all-code":"Pokaż cały kod","code-tools-hide-all-code":"Ukryj cały kod","code-tools-view-source":"Pokaż źródło","code-tools-source-code":"Kod źródłowy","tools-share":"Share","tools-download":"Download","code-line":"Linia","code-lines":"Linie","copy-button-tooltip":"Kopiuj do schowka","copy-button-tooltip-success":"Skopiowano!","repo-action-links-edit":"Edytuj tę stronę","repo-action-links-source":"Pokaż źródło","repo-action-links-issue":"Zgłoś problem","back-to-top":"Powrót do góry","search-no-results-text":"Brak wyników","search-matching-documents-text":"dopasowane dokumenty","search-copy-link-title":"Kopiuj link do wyszukiwania","search-hide-matches-text":"Ukryj dodatkowe dopasowania","search-more-match-text":"więcej dopasowań w tym dokumencie","search-more-matches-text":"więcej dopasowań w tym dokumencie","search-clear-button-title":"Wyczyść","search-text-placeholder":"","search-detached-cancel-button-title":"Anuluj","search-submit-button-title":"Zatwierdź","search-label":"Szukaj","toggle-section":"Przełącz sekcję","toggle-sidebar":"Przełącz pasek boczny","toggle-dark-mode":"Przełącz tryb ciemny","toggle-reader-mode":"Przełącz tryb czytnika","toggle-navigation":"Przełącz nawigację","crossref-fig-title":"Rysunek","crossref-tbl-title":"Tabela","crossref-lst-title":"Wykaz","crossref-thm-title":"Twierdzenie","crossref-lem-title":"Lemat","crossref-cor-title":"Wniosek","crossref-prp-title":"Proposition","crossref-cnj-title":"Przypuszczenie","crossref-def-title":"Definicja","crossref-exm-title":"Przykład","crossref-exr-title":"Ćwiczenie","crossref-ch-prefix":"Rozdział","crossref-apx-prefix":"Załącznik","crossref-sec-prefix":"Sekcja","crossref-eq-prefix":"Równanie","crossref-lof-title":"Spis rycin","crossref-lot-title":"Spis tabel","crossref-lol-title":"Spis wykazów","environment-proof-title":"Dowód","environment-remark-title":"Komentarz","environment-solution-title":"Rozwiązanie","listing-page-order-by":"Sortuj według","listing-page-order-by-default":"Domyślnie","listing-page-order-by-date-asc":"Od najstarszych","listing-page-order-by-date-desc":"Od najnowszych","listing-page-order-by-number-desc":"Od największych","listing-page-order-by-number-asc":"Od najmniejszych","listing-page-field-date":"Data","listing-page-field-title":"Tytuł","listing-page-field-description":"Opis","listing-page-field-author":"Autor","listing-page-field-filename":"Nazwa pliku","listing-page-field-filemodified":"Zmodyfikowano","listing-page-field-subtitle":"Podtytuł","listing-page-field-readingtime":"Czas czytania","listing-page-field-wordcount":"Licznik Słów","listing-page-field-categories":"Kategorie","listing-page-minutes-compact":"{0} min","listing-page-category-all":"Wszystkie","listing-page-no-matches":"Brak pasujących","listing-page-words":"{0} słów"},"metadata":{"lang":"pl","fig-responsive":true,"quarto-version":"1.4.553","roject":{"type":"website"},"theme":"cosmo","title-block-banner":"#54698a","title-block-banner-color":"#dee1e3","title":"Symulacja Monte Carlo","subtitle":"przykład","author":"Michał Kołodziejczyk","date":"now","editor":"visual","jupyter":"python3","cap-location":"margin","toc-location":"left","tbl-pos":"H","code-summary":"Skrypt:"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}