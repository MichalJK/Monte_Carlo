[
  {
    "objectID": "info.html",
    "href": "info.html",
    "title": "Info",
    "section": "",
    "text": "Jest to przykład prostej symulacji Monte Carlo, napisanej w Pythonie. Raport wykonano w Quarto, RStudio."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Monte Carlo simulation",
    "section": "",
    "text": "Monte Carlo simulation is a method used to predict the probability of an outcome when there is variability in the data. The variability in the data can be described in several ways. Most commonly, statistical methods are used, and in the case of a quantity with a normal distribution, its variability is described by the mean and standard deviation.\nIn a Monte Carlo experiment, a large number of data are drawn from an assumed range of variability of a particular model quantity. These data are then used to generate a large number of model responses, and the resulting distribution of results is evaluated using statistical methods.\nThe idea of the Monte Carlo method is outlined in the figure below for a very simple model described by an ordinary function of several independent variables \\(x_i\\). For the sake of simplicity, the distribution of each of these variables is assumed to be Gaussian.\nThe data sampling scheme is as follows:\nThe figure below illustrates this process."
  },
  {
    "objectID": "index.html#the-model",
    "href": "index.html#the-model",
    "title": "Monte Carlo simulation",
    "section": "The model",
    "text": "The model\nThe model is described by a function of three independent variables \\(x_1, x_2, x_3\\):\n\\(y = a + b \\: sin(x_1) + c\\: x_2^2 + d \\: ln(x_3)\\),\nwhere \\(a,\\: b,\\: c\\) i \\(d\\) are constant parameters.\n\n\nScript:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, ks_2samp, shapiro\nimport math\n\n# model\ndef funkcja_model(param, x):\n    a = param[0]\n    b = param[1]\n    c = param[2]\n    d = param[3]\n    # model\n    y = a + b*math.sin(x[0]) + c * (x[1] ** 2) +d * math.log(x[2])\n    return y"
  },
  {
    "objectID": "index.html#charts",
    "href": "index.html#charts",
    "title": "Monte Carlo simulation",
    "section": "Charts",
    "text": "Charts\nThe ‘wykresy’ function plots the histogram, probability density distribution, and cumulative distribution of each variable. Normal distributions are assumed for simplicity.\n\n\nScript:\ndef wykresy(i, x, sd):\n        plt.subplot(1, 3, 1)\n        plt.hist(np.random.normal(x[i], sd[i], 10000), bins=30, alpha=0.7, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"frequency\")\n        plt.title(\"Histogram\")\n\n        xx = np.linspace(x[i] - 4 * sd[i], x[i] + 4 * sd[i], 100)\n        yy = norm.pdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 2)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"probability density\")\n        plt.title(f\"Distribution of x{i+1}\")\n\n        yy = norm.cdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 3)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"cumulative probability\")\n        plt.title(\"cdf\")\n        plt.show()"
  },
  {
    "objectID": "index.html#monte-carlo",
    "href": "index.html#monte-carlo",
    "title": "Monte Carlo simulation",
    "section": "Monte Carlo",
    "text": "Monte Carlo\nFunction that implements a Monte Carlo experiment. Formal parameters: n - number of variables \\(x_i\\), nn - number of draws, x - mean values of the \\(x_i\\), sd - their standard deviations, parametry - parameters of the function describing the model. The function uses a random number generator and the inverse function of the cumulative distribution function.\n\n\nScript:\ndef monte_carlo(n, nn, x, sd, parametry):\n    np.random.seed(7)\n    y = np.zeros(nn)\n    for i in range(nn):\n        los_x = np.zeros(n)\n        for j in range(n):\n            los_x[j] = norm.ppf(np.random.rand(), x[j], sd[j])\n        y[i] = funkcja_model(parametry, los_x)\n    return y"
  },
  {
    "objectID": "index.html#data-distributions",
    "href": "index.html#data-distributions",
    "title": "Monte Carlo simulation",
    "section": "Data distributions",
    "text": "Data distributions\nInput data distributions.\n\n\nScript:\nfor i in range(n):\n    wykresy(i, x, sd)\n\n\n\n\n\n\n\n\nFigure 3: Distribution of x1\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Distribution of x2\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Distribution of x3"
  },
  {
    "objectID": "index.html#monte-carlo-simulation-results",
    "href": "index.html#monte-carlo-simulation-results",
    "title": "Monte Carlo simulation",
    "section": "Monte Carlo simulation results",
    "text": "Monte Carlo simulation results\n\n\nScript:\nnn = 100000  # the number od draws\n\ny = monte_carlo(n, nn, x, sd, parametry)  #  Monte Carlo simulation\n\n\nAll the results of the model calculations are shown in Figure 6 . Their mean and standard deviation are given below.\n\n\nScript:\nplt.scatter(range(len(y)), y, s=0.5, color=\"#54698a\")\nplt.xlabel(\"draw number\")\nplt.ylabel(\"y\")\nplt.title(\"Summary Result of Monte Carlo Simulation\")\nplt.show()\n\ny_av = np.mean(y)\nsd_y = np.std(y)\n\nprint(\"The resulting mean y_av = \", round(y_av,2))\nprint(\"Standard deviation sd_y = \", round(sd_y,2))\n\n\n\n\n\n\n\n\nFigure 6: Results of sampling in Monte Carlo simulation\n\n\n\n\n\nThe resulting mean y_av =  682.43\nStandard deviation sd_y =  44.98"
  },
  {
    "objectID": "index.html#distribution-of-the-resulting-quantity",
    "href": "index.html#distribution-of-the-resulting-quantity",
    "title": "Monte Carlo simulation",
    "section": "Distribution of the resulting quantity",
    "text": "Distribution of the resulting quantity\nFigure 7 shows a histogram and a \\(y\\) quantile plot for visual evaluation of the distribution.\n\nHistogram and quantile plot\nThe histogram allows you to assess the symmetry of the distribution, and the quantile plot allows you to assess whether the distribution is normal.\n\n\nScript:\nplt.subplot(1, 2, 1)\nplt.hist(y, bins=30, color=\"#54698a\", alpha=0.7)\nplt.title(\"Histogram of y\")\nplt.ylabel(\"frequency\")\nplt.xlabel(\"y\")\n\nyy = (y - y_av) / sd_y  # Standardization of distribution\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.sort(norm.ppf(np.linspace(0.01, 0.99, len(yy)))), np.sort(yy), s=0.5, color=\"#54698a\")\nplt.title('Quantile plot Q-Q')\nplt.xlabel('quantiles of the normal distribution')\nplt.ylabel('quantiles of the y-distribution')\nplt.plot([min(yy), max(yy)], [min(yy), max(yy)], color='#96cdf2')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 7: Visual check of the normality of the y-distribution\n\n\n\n\n\n\n\nCheck the normality of the y-distribution\nThe \\(y\\) has 100,000 elements, so the Kolmogorov-Smirnov test was used to assess the normality of its distribution..\n\n\nScript:\n# Kolmogorow-Smirnow test\nksx = ks_2samp(y, np.random.normal(y_av, sd_y, len(y)))\nksxp = ksx.pvalue\nprint(\" p_value = \", round(ksx.pvalue,4))\n\nif ksxp &lt; 0.05:\n    print(\"\\nAccording to the Kolmogorov-Smirnov test, the distribution of y-size is not normal,\\nbecause the probability of falsely negating its normality  \\np_value is &lt; 0.05. \")\nelse:\n    print(\"According to the Kolmogorov-Smirnov test, the distribution of y is normal (the normality of the distribution cannot be denied)\\n\\n\")\n\n# Shapiro-Wilka test\nif nn &lt;= 5000:\n    swx = shapiro(y)\n    print(swx)\n\n    swxp = swx.pvalue\n\n    if swxp &lt; 0.05:\n        print(\"According to the Shapiro-Wilk test, the distribution of y-size is not normal\\n\\n\")\n    else:\n        print(\"According to the Shapiro-Wilk test, the distribution of y is normal (the normality of the distribution cannot be denied)\\n\\n\")\n\n\n p_value =  0.004\n\nAccording to the Kolmogorov-Smirnov test, the distribution of y-size is not normal,\nbecause the probability of falsely negating its normality  \np_value is &lt; 0.05. \n\n\n\n\nThe distribution of y\nFigure 8 represents the obtained probability density distribution \\(y\\) and its cumulative distribution function.\n\n\nScript:\nplt.subplot(1, 2, 1)\nd = np.histogram(y, bins=50, density=True)\nplt.title(\"The distribution of y\")\nplt.xlabel(\"y\")\nplt.ylabel(\"probability density\")\nplt.plot(d[1][:-1], d[0], color=\"#54698a\", lw=2)\n\nplt.subplot(1, 2, 2)\nplt.plot(d[1][:-1], np.cumsum(d[0]) / max(np.cumsum(d[0])), lw=2, color=\"#54698a\")\nplt.xlabel(\"y\")\nplt.ylabel(\"cumulative probability\")\nplt.title(\"Cumulative distribution function\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 8: The distribution of y\n\n\n\n\n\n\n\nMedian, skewness and kurtosis\nThe median, skewness, and kurtosis of \\(y\\) were determined to further assess the deviation from the normal distribution.\n\n\nScript:\nfrom scipy.stats import skew\nfrom scipy.stats import kurtosis\n\n\nmed = np.median(y,  axis=0)\nprint(\"Median = \", round(med,2))\n\nsk = skew(y, axis=0, bias=True)\nprint(\"Skewness = \", round(sk,5))\n\nkurt = kurtosis(y, fisher=True, axis=0, bias=True) # kurtoza = 0 dla rozkłądu Gaussa\nprint(\"Kortosis = \", round(kurt,5))\n\nq_025 = np.quantile(y, 0.025)\nq_975 = np.quantile(y, 0.975)\n\nprint(\"0.025 quantile = \", round(q_025,2))\nprint(\"0.975 quantile = \", round(q_975,2))\n\n\nMedian =  681.76\nSkewness =  0.08682\nKortosis =  0.01324\n0.025 quantile =  596.13\n0.975 quantile =  771.98"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is an example of a simple Monte Carlo simulation programmed in Python. The report was written in Quarto, RStudio."
  },
  {
    "objectID": "index_pl.html",
    "href": "index_pl.html",
    "title": "Symulacja Monte Carlo",
    "section": "",
    "text": "Symulacja Monte Carlo to metoda używana do przewidywania prawdopodobieństwa wyniku, gdy występuje zmienność danych. Zmienność danych może być opisana w różny sposób. Najczęściej wykorzystuje się metody statystyczne i w przypadku, gdy dana wielkość posiada rozkład normalny, jego zmienność opisuje wartość średnia i odchylenie standardowe.\nEksperyment Monte Carlo polega na losowaniu dużej liczby danych z założonego zakresu zmienności poszczególnej wielkości modelowej. Następnie wykorzystuje się je do wygenerowania dużej liczby odpowiedzi modelu i w rezultacie, do oceny uzyskanego rozkładu wyników metodami statystycznymi.\nIdea metody Monte Carlo została naszkicowana na poniższym rysunku dla bardzo prostego modelu opisanego zwykłą funkcją kilku zmiennych niezależnych \\(x_i\\). W przedstawionym przykładzie założono dla uproszczenia, że rozkład każdej z nich jest zgodny z rozkładem Gaussa.\nSchemat losowania danych jest następujący:"
  },
  {
    "objectID": "index_pl.html#model",
    "href": "index_pl.html#model",
    "title": "Symulacja Monte Carlo",
    "section": "Model",
    "text": "Model\nModel opisany jest funkcją trzech zmiennych niezależnych \\(x_1, x_2, x_3\\):\n\\(y = a + b \\: sin(x_1) + c\\: x_2^2 + d \\: ln(x_3)\\),\ngdzie \\(a,\\: b,\\: c\\) i \\(d\\) są stałymi parametrami.\n\n\nSkrypt:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, ks_2samp, shapiro\nimport math\n\n# model\ndef funkcja_model(param, x):\n    a = param[0]\n    b = param[1]\n    c = param[2]\n    d = param[3]\n    # model\n    y = a + b*math.sin(x[0]) + c * (x[1] ** 2) +d * math.log(x[2])\n    return y"
  },
  {
    "objectID": "index_pl.html#wykresy",
    "href": "index_pl.html#wykresy",
    "title": "Symulacja Monte Carlo",
    "section": "Wykresy",
    "text": "Wykresy\nFunkcja ‘wykresy’ kreśli histogram, rozkład gęstości prawdopodobieństwa i dystrybuantę każdej danej. Dla uproszczenia założono rozkłady normalne.\n\n\nSkrypt:\ndef wykresy(i, x, sd):\n        plt.subplot(1, 3, 1)\n        plt.hist(np.random.normal(x[i], sd[i], 10000), bins=30, alpha=0.7, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"częstość\")\n        plt.title(\"Histogram\")\n\n        xx = np.linspace(x[i] - 4 * sd[i], x[i] + 4 * sd[i], 100)\n        yy = norm.pdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 2)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"gęstość prawdopodobieństwa\")\n        plt.title(f\"Rozkład x{i+1}\")\n\n        yy = norm.cdf(xx, x[i], sd[i])\n        plt.subplot(1, 3, 3)\n        plt.plot(xx, yy, lw=2, color=\"#54698a\")\n        plt.xlabel(f\"x{i+1}\")\n        plt.ylabel(\"prawdopodobieństwo skumulowane\")\n        plt.title(\"Dystrybuanta\")\n        plt.show()"
  },
  {
    "objectID": "index_pl.html#monte-carlo",
    "href": "index_pl.html#monte-carlo",
    "title": "Symulacja Monte Carlo",
    "section": "Monte Carlo",
    "text": "Monte Carlo\nFunkcja realizująca eksperyment Monte Carlo. Parametry formalne: n - liczba zmiennych \\(x_i\\), nn - liczba losowań, x - wartości średnie danych, sd - ich odchylenia standardowe, parametry - parametry funkcji opisującej model. Funkcja wykorzystuje generator liczb losowych i funkcję odwrotną dystrybuanty.\n\n\nSkrypt:\ndef monte_carlo(n, nn, x, sd, parametry):\n    np.random.seed(7)\n    y = np.zeros(nn)\n    for i in range(nn):\n        los_x = np.zeros(n)\n        for j in range(n):\n            los_x[j] = norm.ppf(np.random.rand(), x[j], sd[j])\n        y[i] = funkcja_model(parametry, los_x)\n    return y"
  },
  {
    "objectID": "index_pl.html#rozkłady-danych",
    "href": "index_pl.html#rozkłady-danych",
    "title": "Symulacja Monte Carlo",
    "section": "Rozkłady danych",
    "text": "Rozkłady danych\nRozkłady danych wejściowych.\n\n\nSkrypt:\nfor i in range(n):\n    wykresy(i, x, sd)\n\n\n\n\n\n\n\n\nFigure 1: Rozkład wielkości x1\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Rozkład wielkości x2\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Rozkład wielkości x3"
  },
  {
    "objectID": "index_pl.html#wyniki-symulacji-monte-carlo",
    "href": "index_pl.html#wyniki-symulacji-monte-carlo",
    "title": "Symulacja Monte Carlo",
    "section": "Wyniki symulacji Monte Carlo",
    "text": "Wyniki symulacji Monte Carlo\n\n\nSkrypt:\nnn = 100000  # liczba losowań\n\ny = monte_carlo(n, nn, x, sd, parametry)  # symulacja Monte Carlo\n\n\nWszystkie wyniki obliczeń modelu przedstawiono na rys. Figure 4. Poniżej wyznaczono ich wartość średnią i odchylenie standardowe.\n\n\nSkrypt:\nplt.scatter(range(len(y)), y, s=0.5, color=\"#54698a\")\nplt.xlabel(\"nr losowania\")\nplt.ylabel(\"y\")\nplt.title(\"Wynik zbiorczy symulacji Monte Carlo\")\nplt.show()\n\ny_av = np.mean(y)\nsd_y = np.std(y)\n\nprint(\"Uzyskana wartość średnia y_av = \", round(y_av,2))\nprint(\"Odchylenie standardowe sd_y = \", round(sd_y,2))\n\n\n\n\n\n\n\n\nFigure 4: Wyniki losowań w symulacji Monte Carlo\n\n\n\n\n\nUzyskana wartość średnia y_av =  682.43\nOdchylenie standardowe sd_y =  44.98"
  },
  {
    "objectID": "index_pl.html#rozkład-wielkości-wynikowej",
    "href": "index_pl.html#rozkład-wielkości-wynikowej",
    "title": "Symulacja Monte Carlo",
    "section": "Rozkład wielkości wynikowej",
    "text": "Rozkład wielkości wynikowej\nFigure 5 przedstawia histogram i wykres kwantylowy \\(y\\) w celu wizualnej oceny rozkładu wyniku.\n\nHistogram i wykres kwantylowy\nHistogram pozwala ocenić symetryczność rozkładu, a wykres kwantylowy zgodność z rozkładem normalnym.\n\n\nSkrypt:\nplt.subplot(1, 2, 1)\nplt.hist(y, bins=30, color=\"#54698a\", alpha=0.7)\nplt.title(\"Histogram y\")\nplt.ylabel(\"częstość\")\nplt.xlabel(\"y\")\n\nyy = (y - y_av) / sd_y  # standaryzacja rozkładu\n\nplt.subplot(1, 2, 2)\nplt.scatter(np.sort(norm.ppf(np.linspace(0.01, 0.99, len(yy)))), np.sort(yy), s=0.5, color=\"#54698a\")\nplt.title('Wykres kwantylowy Q-Q')\nplt.xlabel('kwantyle rozkładu normalnego')\nplt.ylabel('kwantyle rozkładu y')\nplt.plot([min(yy), max(yy)], [min(yy), max(yy)], color='#96cdf2')\nplt.show()\n\n\n\n\n\n\n\n\nFigure 5: Wizualne sprawdzenie normalności rozkładu y\n\n\n\n\n\n\n\nSprawdzanie normalności rozkładu y\nWynik \\(y\\) liczy sobie 100 000 elementów, więc do oceny normalności jego rozkładu zastosowano test Kołmogorowa-Smirnowa.\n\n\nSkrypt:\n# test Kołmogorowa-Smirnowa\nksx = ks_2samp(y, np.random.normal(y_av, sd_y, len(y)))\nksxp = ksx.pvalue\nprint(\"prawdopodobieństwo p_value = \", round(ksx.pvalue,4))\n\nif ksxp &lt; 0.05:\n    print(\"\\nWedług testu Kołmogorowa-Smirnowa rozkład wielkości y nie jest normalny,\\nponieważ prawdopodobieństwo błędnego zanegowania jego normalności \\np_value jest &lt; 0.05. \")\nelse:\n    print(\"Według testu Kołmogorowa-Smirnowa rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n\n# test Shapiro-Wilka\nif nn &lt;= 5000:\n    swx = shapiro(y)\n    print(swx)\n\n    swxp = swx.pvalue\n\n    if swxp &lt; 0.05:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y nie jest normalny\\n\\n\")\n    else:\n        print(\"Według testu Shapiro-Wilka rozkład wielkości y jest normalny (nie da się zaprzeczyć normalności rozkładu)\\n\\n\")\n\n\nprawdopodobieństwo p_value =  0.004\n\nWedług testu Kołmogorowa-Smirnowa rozkład wielkości y nie jest normalny,\nponieważ prawdopodobieństwo błędnego zanegowania jego normalności \np_value jest &lt; 0.05. \n\n\n\n\nRozkład y\nFigure 6 przedstawia uzyskany rozkład gęstości prawdopodobieństwa \\(y\\) i jego dystrybuantę.\n\n\nSkrypt:\nplt.subplot(1, 2, 1)\nd = np.histogram(y, bins=50, density=True)\nplt.title(\"Rozkład y\")\nplt.xlabel(\"y\")\nplt.ylabel(\"gęstość prawdopodobieństwa\")\nplt.plot(d[1][:-1], d[0], color=\"#54698a\", lw=2)\n\nplt.subplot(1, 2, 2)\nplt.plot(d[1][:-1], np.cumsum(d[0]) / max(np.cumsum(d[0])), lw=2, color=\"#54698a\")\nplt.xlabel(\"y\")\nplt.ylabel(\"prawdopodobieństwo skumulowane\")\nplt.title(\"Dystrybuanta\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 6: Rozkład wielkości y\n\n\n\n\n\n\n\nMediana, skośność i kurtoza\nW celu dodatkowej oceny rozbieżności z rozkładem normalnym wyznaczono medianę, skośność i kurtozę \\(y\\).\n\n\nSkrypt:\nfrom scipy.stats import skew\nfrom scipy.stats import kurtosis\n\n\nmed = np.median(y,  axis=0)\nprint(\"mediana = \", round(med,2))\n\nsk = skew(y, axis=0, bias=True)\nprint(\"skośność = \", round(sk,5))\n\nkurt = kurtosis(y, fisher=True, axis=0, bias=True) # kurtoza = 0 dla rozkłądu Gaussa\nprint(\"kurtoza = \", round(kurt,5))\n\nq_025 = np.quantile(y, 0.025)\nq_975 = np.quantile(y, 0.975)\n\nprint(\"kwantyl 0.025 = \", round(q_025,2))\nprint(\"kwantyl 0.975 = \", round(q_975,2))\n\n\nmediana =  681.76\nskośność =  0.08682\nkurtoza =  0.01324\nkwantyl 0.025 =  596.13\nkwantyl 0.975 =  771.98"
  }
]